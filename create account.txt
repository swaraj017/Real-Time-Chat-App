/*
// Function to generate a mnemonic
function generateMnemonic() {
  return bip39.generateMnemonic();
}

// Function to create Solana wallets
function createsolwall(mnemonic, numberOfWallets = 1) {
  const seed = bip39.mnemonicToSeedSync(mnemonic);
  const wallets = [];

  for (let i = 0; i < numberOfWallets; i++) {
    const path = `m/44'/501'/0'/${i}'`;
    const derivedSeed = derivePath(path, seed.toString('hex')).key;
    const keypair = Keypair.fromSecretKey(new Uint8Array(nacl.sign.keyPair.fromSeed(derivedSeed).secretKey));

    const privateKeyBase64Url = base64url.encode(Buffer.from(keypair.secretKey));

    wallets.push({
      publicKey: keypair.publicKey.toBase58(),
      privateKey: privateKeyBase64Url
    });
  }

  return wallets;
}

function createEthWall(mnemonic, numberOfWallets = 1) {
  const seed = bip39.mnemonicToSeedSync(mnemonic);
  const hdNode = ethers.utils.HDNode.fromSeed(seed); // Use ethers.utils.HDNode

  const derivationPath = `m/44'/60'/0'/0/`; // Standard Ethereum HD path
  const wallets = [];

  for (let i = 0; i < numberOfWallets; i++) {
    const path = `${derivationPath}${i}`;
    const childNode = hdNode.derivePath(path); // Derive a child node from the HDNode
    const wallet = new ethers.Wallet(childNode.privateKey); // Create a wallet from the derived private key

    wallets.push({
      address: wallet.address,
      privateKey: wallet.privateKey
    });
  }

  return wallets;
}

// Route to render the account page with mnemonic
app.get('/account', (req, res) => {
  const mnemonic = req.query.mnemonic || generateMnemonic();
  res.render('account', { mnemonic });
});

// Route to generate a new phrase and redirect
app.get('/newphrase', (req, res) => {
  const mnemonic = generateMnemonic();
  res.redirect(`/account?mnemonic=${encodeURIComponent(mnemonic)}`);
});

// Route to create Solana wallets
app.get('/create-wallet-sol', (req, res) => {
  const mnemonic = req.query.mnemonic;
  const numberOfWallets = parseInt(req.query.numberOfWallets) || 1;

  if (!mnemonic) {
    return res.status(400).send('Mnemonic is required');
  }

  const wallets = createsolwall(mnemonic, numberOfWallets);
  res.send({ wallets });
});

// Route to create Ethereum wallets
app.get('/create-wallet-eth', (req, res) => {
  const mnemonic = req.query.mnemonic;
  const numberOfWallets = parseInt(req.query.numberOfWallets) || 1;

  if (!mnemonic) {
      return res.status(400).send('Mnemonic is required');
  }

  const wallets = createEthWall(mnemonic, numberOfWallets);
  res.json({ wallets }); // Return wallets as JSON
});
*/